// Code generated by goa v3.4.3, DO NOT EDIT.
//
// orders HTTP server types
//
// Command:
// $ goa gen algodexidx/design

package server

import (
	orders "algodexidx/gen/orders"

	goa "goa.design/goa/v3/pkg"
)

// GetResponseBody is the type of the "orders" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Sell orders
	SellASAOrdersInEscrow []*OrderResponseBody `form:"sellASAOrdersInEscrow,omitempty" json:"sellASAOrdersInEscrow,omitempty" xml:"sellASAOrdersInEscrow,omitempty"`
	// Buy orders
	BuyASAOrdersInEscrow []*OrderResponseBody `form:"buyASAOrdersInEscrow,omitempty" json:"buyASAOrdersInEscrow,omitempty" xml:"buyASAOrdersInEscrow,omitempty"`
}

// GetAccessDeniedResponseBody is the type of the "orders" service "get"
// endpoint HTTP response body for the "access_denied" error.
type GetAccessDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// OrderResponseBody is used to define fields on response body types.
type OrderResponseBody struct {
	AssetLimitPriceInAlgos     string `db:"assetLimitPriceInAlgos" json:"assetLimitPriceInAlgos"`
	AsaPrice                   string `db:"asaPrice" json:"asaPrice"`
	AssetLimitPriceD           uint64 `db:"assetLimitPriceD" json:"assetLimitPriceD"`
	AssetLimitPriceN           uint64 `db:"assetLimitPriceN" json:"assetLimitPriceN"`
	AlgoAmount                 uint64 `db:"algoAmount" json:"algoAmount"`
	AsaAmount                  uint64 `db:"asaAmount" json:"asaAmount"`
	AssetID                    uint64 `db:"assetId" json:"assetId"`
	AppID                      uint64 `db:"appId" json:"appId"`
	EscrowAddress              string `db:"escrowAddress" json:"escrowAddress"`
	OwnerAddress               string `db:"ownerAddress" json:"ownerAddress"`
	MinimumExecutionSizeInAlgo uint64 `db:"minimumExecutionSizeInAlgo" json:"minimumExecutionSizeInAlgo"`
	Round                      uint64 `db:"round" json:"round"`
	UnixTime                   uint64 `db:"unix_time" json:"unix_time"`
	FormattedPrice             string `db:"formattedPrice" json:"formattedPrice"`
	FormattedASAAmount         string `db:"formattedASAAmount" json:"formattedASAAmount"`
	Decimals                   uint64 `db:"decimals" json:"decimals"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "orders" service.
func NewGetResponseBody(res *orders.Orders) *GetResponseBody {
	body := &GetResponseBody{}
	if res.SellASAOrdersInEscrow != nil {
		body.SellASAOrdersInEscrow = make([]*OrderResponseBody, len(res.SellASAOrdersInEscrow))
		for i, val := range res.SellASAOrdersInEscrow {
			body.SellASAOrdersInEscrow[i] = marshalOrdersOrderToOrderResponseBody(val)
		}
	}
	if res.BuyASAOrdersInEscrow != nil {
		body.BuyASAOrdersInEscrow = make([]*OrderResponseBody, len(res.BuyASAOrdersInEscrow))
		for i, val := range res.BuyASAOrdersInEscrow {
			body.BuyASAOrdersInEscrow[i] = marshalOrdersOrderToOrderResponseBody(val)
		}
	}
	return body
}

// NewGetAccessDeniedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "orders" service.
func NewGetAccessDeniedResponseBody(res *goa.ServiceError) *GetAccessDeniedResponseBody {
	body := &GetAccessDeniedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPayload builds a orders service get endpoint payload.
func NewGetPayload(assetID *uint64, ownerAddr []string) *orders.GetPayload {
	v := &orders.GetPayload{}
	v.AssetID = assetID
	v.OwnerAddr = ownerAddr

	return v
}
