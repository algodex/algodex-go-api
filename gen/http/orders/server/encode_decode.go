// Code generated by goa v3.4.3, DO NOT EDIT.
//
// orders HTTP server encoders and decoders
//
// Command:
// $ goa gen algodexidx/design

package server

import (
	orders "algodexidx/gen/orders"
	"context"
	"net/http"
	"strconv"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetResponse returns an encoder for responses returned by the orders
// get endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*orders.Orders)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the orders get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			assetID   *uint64
			ownerAddr []string
			err       error
		)
		{
			assetIDRaw := r.URL.Query().Get("assetId")
			if assetIDRaw != "" {
				v, err2 := strconv.ParseUint(assetIDRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("assetID", assetIDRaw, "unsigned integer"))
				}
				assetID = &v
			}
		}
		ownerAddr = r.URL.Query()["ownerAddr"]
		for _, e := range ownerAddr {
			err = goa.MergeErrors(err, goa.ValidatePattern("ownerAddr[*]", e, "^[A-Z2-7]{58}$"))
			if utf8.RuneCountInString(e) < 58 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("ownerAddr[*]", e, utf8.RuneCountInString(e), 58, true))
			}
			if utf8.RuneCountInString(e) > 58 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("ownerAddr[*]", e, utf8.RuneCountInString(e), 58, false))
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetPayload(assetID, ownerAddr)

		return payload, nil
	}
}

// EncodeGetError returns an encoder for errors returned by the get orders
// endpoint.
func EncodeGetError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "access_denied":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccessDeniedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalOrdersOrderToOrderResponseBody builds a value of type
// *OrderResponseBody from a value of type *orders.Order.
func marshalOrdersOrderToOrderResponseBody(v *orders.Order) *OrderResponseBody {
	if v == nil {
		return nil
	}
	res := &OrderResponseBody{
		AssetLimitPriceInAlgos:     v.AssetLimitPriceInAlgos,
		AsaPrice:                   v.AsaPrice,
		AssetLimitPriceD:           v.AssetLimitPriceD,
		AssetLimitPriceN:           v.AssetLimitPriceN,
		AlgoAmount:                 v.AlgoAmount,
		AsaAmount:                  v.AsaAmount,
		AssetID:                    v.AssetID,
		AppID:                      v.AppID,
		EscrowAddress:              v.EscrowAddress,
		OwnerAddress:               v.OwnerAddress,
		MinimumExecutionSizeInAlgo: v.MinimumExecutionSizeInAlgo,
		Round:                      v.Round,
		UnixTime:                   v.UnixTime,
		FormattedPrice:             v.FormattedPrice,
		FormattedASAAmount:         v.FormattedASAAmount,
		Decimals:                   v.Decimals,
	}

	return res
}
