// Code generated by goa v3.4.3, DO NOT EDIT.
//
// orders HTTP client types
//
// Command:
// $ goa gen algodexidx/design

package client

import (
	orders "algodexidx/gen/orders"

	goa "goa.design/goa/v3/pkg"
)

// GetResponseBody is the type of the "orders" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Sell orders
	SellASAOrdersInEscrow []*OrderResponseBody `form:"sellASAOrdersInEscrow,omitempty" json:"sellASAOrdersInEscrow,omitempty" xml:"sellASAOrdersInEscrow,omitempty"`
	// Buy orders
	BuyASAOrdersInEscrow []*OrderResponseBody `form:"buyASAOrdersInEscrow,omitempty" json:"buyASAOrdersInEscrow,omitempty" xml:"buyASAOrdersInEscrow,omitempty"`
}

// GetAccessDeniedResponseBody is the type of the "orders" service "get"
// endpoint HTTP response body for the "access_denied" error.
type GetAccessDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// OrderResponseBody is used to define fields on response body types.
type OrderResponseBody struct {
	AssetLimitPriceInAlgos     *string `form:"assetLimitPriceInAlgos,omitempty" json:"assetLimitPriceInAlgos,omitempty" xml:"assetLimitPriceInAlgos,omitempty"`
	AsaPrice                   *string `form:"asaPrice,omitempty" json:"asaPrice,omitempty" xml:"asaPrice,omitempty"`
	AssetLimitPriceD           *uint64 `form:"assetLimitPriceD,omitempty" json:"assetLimitPriceD,omitempty" xml:"assetLimitPriceD,omitempty"`
	AssetLimitPriceN           *uint64 `form:"assetLimitPriceN,omitempty" json:"assetLimitPriceN,omitempty" xml:"assetLimitPriceN,omitempty"`
	AlgoAmount                 *uint64 `form:"algoAmount,omitempty" json:"algoAmount,omitempty" xml:"algoAmount,omitempty"`
	AsaAmount                  *uint64 `form:"asaAmount,omitempty" json:"asaAmount,omitempty" xml:"asaAmount,omitempty"`
	AssetID                    *uint64 `form:"assetId,omitempty" json:"assetId,omitempty" xml:"assetId,omitempty"`
	AppID                      *uint64 `form:"appId,omitempty" json:"appId,omitempty" xml:"appId,omitempty"`
	EscrowAddress              *string `form:"escrowAddress,omitempty" json:"escrowAddress,omitempty" xml:"escrowAddress,omitempty"`
	OwnerAddress               *string `form:"ownerAddress,omitempty" json:"ownerAddress,omitempty" xml:"ownerAddress,omitempty"`
	MinimumExecutionSizeInAlgo *uint64 `form:"minimumExecutionSizeInAlgo,omitempty" json:"minimumExecutionSizeInAlgo,omitempty" xml:"minimumExecutionSizeInAlgo,omitempty"`
	Round                      *uint64 `form:"round,omitempty" json:"round,omitempty" xml:"round,omitempty"`
	UnixTime                   *uint64 `form:"unix_time,omitempty" json:"unix_time,omitempty" xml:"unix_time,omitempty"`
	FormattedPrice             *string `form:"formattedPrice,omitempty" json:"formattedPrice,omitempty" xml:"formattedPrice,omitempty"`
	FormattedASAAmount         *string `form:"formattedASAAmount,omitempty" json:"formattedASAAmount,omitempty" xml:"formattedASAAmount,omitempty"`
	Decimals                   *uint64 `form:"decimals,omitempty" json:"decimals,omitempty" xml:"decimals,omitempty"`
}

// NewGetOrdersOK builds a "orders" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetOrdersOK(body *GetResponseBody) *orders.Orders {
	v := &orders.Orders{}
	if body.SellASAOrdersInEscrow != nil {
		v.SellASAOrdersInEscrow = make([]*orders.Order, len(body.SellASAOrdersInEscrow))
		for i, val := range body.SellASAOrdersInEscrow {
			v.SellASAOrdersInEscrow[i] = unmarshalOrderResponseBodyToOrdersOrder(val)
		}
	}
	if body.BuyASAOrdersInEscrow != nil {
		v.BuyASAOrdersInEscrow = make([]*orders.Order, len(body.BuyASAOrdersInEscrow))
		for i, val := range body.BuyASAOrdersInEscrow {
			v.BuyASAOrdersInEscrow[i] = unmarshalOrderResponseBodyToOrdersOrder(val)
		}
	}

	return v
}

// NewGetAccessDenied builds a orders service get endpoint access_denied error.
func NewGetAccessDenied(body *GetAccessDeniedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	for _, e := range body.SellASAOrdersInEscrow {
		if e != nil {
			if err2 := ValidateOrderResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.BuyASAOrdersInEscrow {
		if e != nil {
			if err2 := ValidateOrderResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAccessDeniedResponseBody runs the validations defined on
// get_access_denied_response_body
func ValidateGetAccessDeniedResponseBody(body *GetAccessDeniedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateOrderResponseBody runs the validations defined on OrderResponseBody
func ValidateOrderResponseBody(body *OrderResponseBody) (err error) {
	if body.AssetLimitPriceInAlgos == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetLimitPriceInAlgos", "body"))
	}
	if body.AsaPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asaPrice", "body"))
	}
	if body.AssetLimitPriceD == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetLimitPriceD", "body"))
	}
	if body.AssetLimitPriceN == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetLimitPriceN", "body"))
	}
	if body.AlgoAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("algoAmount", "body"))
	}
	if body.AsaAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("asaAmount", "body"))
	}
	if body.AssetID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assetId", "body"))
	}
	if body.AppID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("appId", "body"))
	}
	if body.EscrowAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("escrowAddress", "body"))
	}
	if body.OwnerAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ownerAddress", "body"))
	}
	if body.MinimumExecutionSizeInAlgo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("minimumExecutionSizeInAlgo", "body"))
	}
	if body.Round == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("round", "body"))
	}
	if body.UnixTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("unix_time", "body"))
	}
	if body.FormattedPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("formattedPrice", "body"))
	}
	if body.FormattedASAAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("formattedASAAmount", "body"))
	}
	if body.Decimals == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("decimals", "body"))
	}
	return
}
