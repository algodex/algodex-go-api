// Code generated by goa v3.4.3, DO NOT EDIT.
//
// orders HTTP client CLI support package
//
// Command:
// $ goa gen algodexidx/design

package client

import (
	orders "algodexidx/gen/orders"
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the orders get endpoint from CLI
// flags.
func BuildGetPayload(ordersGetAssetID string, ordersGetOwnerAddr string) (*orders.GetPayload, error) {
	var err error
	var assetID *uint64
	{
		if ordersGetAssetID != "" {
			val, err := strconv.ParseUint(ordersGetAssetID, 10, 64)
			assetID = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for assetID, must be UINT64")
			}
		}
	}
	var ownerAddr []string
	{
		if ordersGetOwnerAddr != "" {
			err = json.Unmarshal([]byte(ordersGetOwnerAddr), &ownerAddr)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for ownerAddr, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU\",\n      \"4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU\",\n      \"4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU\"\n   ]'")
			}
			for _, e := range ownerAddr {
				err = goa.MergeErrors(err, goa.ValidatePattern("ownerAddr[*]", e, "^[A-Z2-7]{58}$"))
				if utf8.RuneCountInString(e) < 58 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("ownerAddr[*]", e, utf8.RuneCountInString(e), 58, true))
				}
				if utf8.RuneCountInString(e) > 58 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("ownerAddr[*]", e, utf8.RuneCountInString(e), 58, false))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &orders.GetPayload{}
	v.AssetID = assetID
	v.OwnerAddr = ownerAddr

	return v, nil
}
