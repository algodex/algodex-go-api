// Code generated by goa v3.4.3, DO NOT EDIT.
//
// inspect HTTP client types
//
// Command:
// $ goa gen algodexidx/design

package client

import (
	inspect "algodexidx/gen/inspect"

	goa "goa.design/goa/v3/pkg"
)

// UnpackRequestBody is the type of the "inspect" service "unpack" endpoint
// HTTP request body.
type UnpackRequestBody struct {
	Msgpack *string `form:"msgpack,omitempty" json:"msgpack,omitempty" xml:"msgpack,omitempty"`
}

// UnpackAccessDeniedResponseBody is the type of the "inspect" service "unpack"
// endpoint HTTP response body for the "access_denied" error.
type UnpackAccessDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewUnpackRequestBody builds the HTTP request body from the payload of the
// "unpack" endpoint of the "inspect" service.
func NewUnpackRequestBody(p *inspect.UnpackPayload) *UnpackRequestBody {
	body := &UnpackRequestBody{
		Msgpack: p.Msgpack,
	}
	return body
}

// NewUnpackAccessDenied builds a inspect service unpack endpoint access_denied
// error.
func NewUnpackAccessDenied(body *UnpackAccessDeniedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUnpackAccessDeniedResponseBody runs the validations defined on
// unpack_access_denied_response_body
func ValidateUnpackAccessDeniedResponseBody(body *UnpackAccessDeniedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
