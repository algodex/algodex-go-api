// Code generated by goa v3.4.3, DO NOT EDIT.
//
// account HTTP server types
//
// Command:
// $ goa gen algodexidx/design

package server

import (
	account "algodexidx/gen/account"
	accountviews "algodexidx/gen/account/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "account" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	Address []string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// GetResponseBody is the type of the "account" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Public Account address
	Address string `form:"address" json:"address" xml:"address"`
	// Account Assets
	Holdings map[string]*HoldingResponseBody `form:"holdings" json:"holdings" xml:"holdings"`
}

// TrackedAccountResponseCollection is the type of the "account" service "list"
// endpoint HTTP response body.
type TrackedAccountResponseCollection []*TrackedAccountResponse

// TrackedAccountResponseFullCollection is the type of the "account" service
// "list" endpoint HTTP response body.
type TrackedAccountResponseFullCollection []*TrackedAccountResponseFull

// HoldingResponseBody is used to define fields on response body types.
type HoldingResponseBody struct {
	// ASA ID (1 for ALGO)
	Asset uint64 `form:"asset" json:"asset" xml:"asset"`
	// Balance in asset base units
	Amount       uint64 `form:"amount" json:"amount" xml:"amount"`
	Decimals     uint64 `form:"decimals" json:"decimals" xml:"decimals"`
	MetadataHash string `form:"metadataHash" json:"metadataHash" xml:"metadataHash"`
	Name         string `form:"name" json:"name" xml:"name"`
	UnitName     string `form:"unitName" json:"unitName" xml:"unitName"`
	URL          string `form:"url" json:"url" xml:"url"`
}

// TrackedAccountResponse is used to define fields on response body types.
type TrackedAccountResponse struct {
	// Public Account address
	Address string `form:"address" json:"address" xml:"address"`
}

// TrackedAccountResponseFull is used to define fields on response body types.
type TrackedAccountResponseFull struct {
	// Public Account address
	Address string `form:"address" json:"address" xml:"address"`
	// Account Assets
	Holdings map[string]*HoldingResponse `form:"holdings" json:"holdings" xml:"holdings"`
}

// HoldingResponse is used to define fields on response body types.
type HoldingResponse struct {
	// ASA ID (1 for ALGO)
	Asset uint64 `form:"asset" json:"asset" xml:"asset"`
	// Balance in asset base units
	Amount       uint64 `form:"amount" json:"amount" xml:"amount"`
	Decimals     uint64 `form:"decimals" json:"decimals" xml:"decimals"`
	MetadataHash string `form:"metadataHash" json:"metadataHash" xml:"metadataHash"`
	Name         string `form:"name" json:"name" xml:"name"`
	UnitName     string `form:"unitName" json:"unitName" xml:"unitName"`
	URL          string `form:"url" json:"url" xml:"url"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "account" service.
func NewGetResponseBody(res *account.Account) *GetResponseBody {
	body := &GetResponseBody{
		Address: res.Address,
	}
	if res.Holdings != nil {
		body.Holdings = make(map[string]*HoldingResponseBody, len(res.Holdings))
		for key, val := range res.Holdings {
			tk := key
			body.Holdings[tk] = marshalAccountHoldingToHoldingResponseBody(val)
		}
	}
	return body
}

// NewTrackedAccountResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "account" service.
func NewTrackedAccountResponseCollection(res accountviews.TrackedAccountCollectionView) TrackedAccountResponseCollection {
	body := make([]*TrackedAccountResponse, len(res))
	for i, val := range res {
		body[i] = marshalAccountviewsTrackedAccountViewToTrackedAccountResponse(val)
	}
	return body
}

// NewTrackedAccountResponseFullCollection builds the HTTP response body from
// the result of the "list" endpoint of the "account" service.
func NewTrackedAccountResponseFullCollection(res accountviews.TrackedAccountCollectionView) TrackedAccountResponseFullCollection {
	body := make([]*TrackedAccountResponseFull, len(res))
	for i, val := range res {
		body[i] = marshalAccountviewsTrackedAccountViewToTrackedAccountResponseFull(val)
	}
	return body
}

// NewAddPayload builds a account service add endpoint payload.
func NewAddPayload(body *AddRequestBody) *account.AddPayload {
	v := &account.AddPayload{}
	v.Address = make([]string, len(body.Address))
	for i, val := range body.Address {
		v.Address[i] = val
	}

	return v
}

// NewGetPayload builds a account service get endpoint payload.
func NewGetPayload(address string) *account.GetPayload {
	v := &account.GetPayload{}
	v.Address = address

	return v
}

// NewListPayload builds a account service list endpoint payload.
func NewListPayload(view *string) *account.ListPayload {
	v := &account.ListPayload{}
	v.View = view

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	return
}
