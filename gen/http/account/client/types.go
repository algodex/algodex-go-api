// Code generated by goa v3.4.3, DO NOT EDIT.
//
// account HTTP client types
//
// Command:
// $ goa gen algodexidx/design

package client

import (
	account "algodexidx/gen/account"
	accountviews "algodexidx/gen/account/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// GetResponseBody is the type of the "account" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Public Account address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Opted-in ASA IDs
	Assets []uint64 `form:"assets,omitempty" json:"assets,omitempty" xml:"assets,omitempty"`
}

// ListResponseBody is the type of the "account" service "list" endpoint HTTP
// response body.
type ListResponseBody []*TrackedAccountResponse

// TrackedAccountResponse is used to define fields on response body types.
type TrackedAccountResponse struct {
	// Public Account address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Opted-in ASA IDs
	Assets []uint64 `form:"assets,omitempty" json:"assets,omitempty" xml:"assets,omitempty"`
}

// NewGetAccountOK builds a "account" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetAccountOK(body *GetResponseBody) *account.Account {
	v := &account.Account{
		Address: *body.Address,
	}
	v.Assets = make([]uint64, len(body.Assets))
	for i, val := range body.Assets {
		v.Assets[i] = val
	}

	return v
}

// NewListTrackedAccountCollectionOK builds a "account" service "list" endpoint
// result from a HTTP "OK" response.
func NewListTrackedAccountCollectionOK(body ListResponseBody) accountviews.TrackedAccountCollectionView {
	v := make([]*accountviews.TrackedAccountView, len(body))
	for i, val := range body {
		v[i] = unmarshalTrackedAccountResponseToAccountviewsTrackedAccountView(val)
	}

	return v
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Assets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assets", "body"))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 58 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 58, false))
		}
	}
	return
}

// ValidateTrackedAccountResponse runs the validations defined on
// TrackedAccountResponse
func ValidateTrackedAccountResponse(body *TrackedAccountResponse) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Assets == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("assets", "body"))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 58 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 58, false))
		}
	}
	return
}
