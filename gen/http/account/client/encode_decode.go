// Code generated by goa v3.4.3, DO NOT EDIT.
//
// account HTTP client encoders and decoders
//
// Command:
// $ goa gen algodexidx/design

package client

import (
	account "algodexidx/gen/account"
	accountviews "algodexidx/gen/account/views"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "account" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the account add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.AddPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "add", "*account.AddPayload", v)
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the account
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddResponse may return the following errors:
//	- "access_denied" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body AddAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "add", err)
			}
			err = ValidateAddAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "add", err)
			}
			return nil, NewAddAccessDenied(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "account" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		address []string
	)
	{
		p, ok := v.(*account.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "delete", "*account.DeletePayload", v)
		}
		address = p.Address
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteAccountPath(address)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the account
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "access_denied" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "delete", err)
			}
			err = ValidateDeleteAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "delete", err)
			}
			return nil, NewDeleteAccessDenied(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteallRequest instantiates a HTTP request object with method and
// path set to call the "account" service "deleteall" endpoint
func (c *Client) BuildDeleteallRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteallAccountPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "deleteall", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteallResponse returns a decoder for responses returned by the
// account deleteall endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteallResponse may return the following errors:
//	- "access_denied" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteallResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteallAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "deleteall", err)
			}
			err = ValidateDeleteallAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "deleteall", err)
			}
			return nil, NewDeleteallAccessDenied(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "deleteall", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "account" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		address string
	)
	{
		p, ok := v.(*account.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "get", "*account.GetPayload", v)
		}
		address = p.Address
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountPath(address)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResponse returns a decoder for responses returned by the account
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//	- "access_denied" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "get", err)
			}
			res := NewGetAccountOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "get", err)
			}
			err = ValidateGetAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "get", err)
			}
			return nil, NewGetAccessDenied(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildGetMultipleRequest instantiates a HTTP request object with method and
// path set to call the "account" service "getMultiple" endpoint
func (c *Client) BuildGetMultipleRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetMultipleAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "getMultiple", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetMultipleRequest returns an encoder for requests sent to the account
// getMultiple server.
func EncodeGetMultipleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.GetMultiplePayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "getMultiple", "*account.GetMultiplePayload", v)
		}
		body := NewGetMultipleRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "getMultiple", err)
		}
		return nil
	}
}

// DecodeGetMultipleResponse returns a decoder for responses returned by the
// account getMultiple endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetMultipleResponse may return the following errors:
//	- "access_denied" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetMultipleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetMultipleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "getMultiple", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateAccountResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "getMultiple", err)
			}
			res := NewGetMultipleAccountOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetMultipleAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "getMultiple", err)
			}
			err = ValidateGetMultipleAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "getMultiple", err)
			}
			return nil, NewGetMultipleAccessDenied(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "getMultiple", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "account" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListAccountPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the account list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "list", "*account.ListPayload", v)
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the account
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//	- "access_denied" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "list", err)
			}
			p := NewListTrackedAccountCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := accountviews.TrackedAccountCollection{Projected: p, View: view}
			if err = accountviews.ValidateTrackedAccountCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("account", "list", err)
			}
			res := account.NewTrackedAccountCollection(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "list", err)
			}
			err = ValidateListAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "list", err)
			}
			return nil, NewListAccessDenied(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildIswatchedRequest instantiates a HTTP request object with method and
// path set to call the "account" service "iswatched" endpoint
func (c *Client) BuildIswatchedRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IswatchedAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "iswatched", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIswatchedRequest returns an encoder for requests sent to the account
// iswatched server.
func EncodeIswatchedRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.IswatchedPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "iswatched", "*account.IswatchedPayload", v)
		}
		body := NewIswatchedRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "iswatched", err)
		}
		return nil
	}
}

// DecodeIswatchedResponse returns a decoder for responses returned by the
// account iswatched endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeIswatchedResponse may return the following errors:
//	- "access_denied" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeIswatchedResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "iswatched", err)
			}
			return body, nil
		case http.StatusUnauthorized:
			var (
				body IswatchedAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "iswatched", err)
			}
			err = ValidateIswatchedAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "iswatched", err)
			}
			return nil, NewIswatchedAccessDenied(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "iswatched", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHoldingResponseBodyToAccountHolding builds a value of type
// *account.Holding from a value of type *HoldingResponseBody.
func unmarshalHoldingResponseBodyToAccountHolding(v *HoldingResponseBody) *account.Holding {
	res := &account.Holding{
		Asset:        *v.Asset,
		Amount:       *v.Amount,
		Decimals:     *v.Decimals,
		MetadataHash: *v.MetadataHash,
		Name:         *v.Name,
		UnitName:     *v.UnitName,
		URL:          *v.URL,
	}

	return res
}

// unmarshalAccountResponseToAccountAccount builds a value of type
// *account.Account from a value of type *AccountResponse.
func unmarshalAccountResponseToAccountAccount(v *AccountResponse) *account.Account {
	res := &account.Account{
		Address: *v.Address,
		Round:   *v.Round,
	}
	res.Holdings = make(map[string]*account.Holding, len(v.Holdings))
	for key, val := range v.Holdings {
		tk := key
		res.Holdings[tk] = unmarshalHoldingResponseToAccountHolding(val)
	}

	return res
}

// unmarshalHoldingResponseToAccountHolding builds a value of type
// *account.Holding from a value of type *HoldingResponse.
func unmarshalHoldingResponseToAccountHolding(v *HoldingResponse) *account.Holding {
	res := &account.Holding{
		Asset:        *v.Asset,
		Amount:       *v.Amount,
		Decimals:     *v.Decimals,
		MetadataHash: *v.MetadataHash,
		Name:         *v.Name,
		UnitName:     *v.UnitName,
		URL:          *v.URL,
	}

	return res
}

// unmarshalTrackedAccountResponseToAccountviewsTrackedAccountView builds a
// value of type *accountviews.TrackedAccountView from a value of type
// *TrackedAccountResponse.
func unmarshalTrackedAccountResponseToAccountviewsTrackedAccountView(v *TrackedAccountResponse) *accountviews.TrackedAccountView {
	res := &accountviews.TrackedAccountView{
		Address: v.Address,
		Round:   v.Round,
	}
	res.Holdings = make(map[string]*accountviews.HoldingView, len(v.Holdings))
	for key, val := range v.Holdings {
		tk := key
		res.Holdings[tk] = unmarshalHoldingResponseToAccountviewsHoldingView(val)
	}

	return res
}

// unmarshalHoldingResponseToAccountviewsHoldingView builds a value of type
// *accountviews.HoldingView from a value of type *HoldingResponse.
func unmarshalHoldingResponseToAccountviewsHoldingView(v *HoldingResponse) *accountviews.HoldingView {
	res := &accountviews.HoldingView{
		Asset:        v.Asset,
		Amount:       v.Amount,
		Decimals:     v.Decimals,
		MetadataHash: v.MetadataHash,
		Name:         v.Name,
		UnitName:     v.UnitName,
		URL:          v.URL,
	}

	return res
}
