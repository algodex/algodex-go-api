// Code generated by goa v3.4.3, DO NOT EDIT.
//
// algodexidxsvr HTTP client CLI support package
//
// Command:
// $ goa gen algodexidx/design

package cli

import (
	accountc "algodexidx/gen/http/account/client"
	infoc "algodexidx/gen/http/info/client"
	inspectc "algodexidx/gen/http/inspect/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `info (version|live)
account (add|delete|get|list|iswatched)
inspect unpack
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` info version` + "\n" +
		os.Args[0] + ` account add --body '{
      "address": [
         "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
         "6APKHESCBZIAAZBMMZYW3MEHWYBIT3V7XDA2MF45J5TUZG5LXFXFVBJSFY"
      ]
   }'` + "\n" +
		os.Args[0] + ` inspect unpack --body '{
      "msgpack": "Temporibus est voluptate quam dolores et."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		infoFlags = flag.NewFlagSet("info", flag.ContinueOnError)

		infoVersionFlags = flag.NewFlagSet("version", flag.ExitOnError)

		infoLiveFlags = flag.NewFlagSet("live", flag.ExitOnError)

		accountFlags = flag.NewFlagSet("account", flag.ContinueOnError)

		accountAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		accountAddBodyFlag = accountAddFlags.String("body", "REQUIRED", "")

		accountDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		accountDeleteAddressFlag = accountDeleteFlags.String("address", "REQUIRED", "")

		accountGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		accountGetAddressFlag = accountGetFlags.String("address", "REQUIRED", "Public Account address")

		accountListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		accountListViewFlag = accountListFlags.String("view", "", "")

		accountIswatchedFlags    = flag.NewFlagSet("iswatched", flag.ExitOnError)
		accountIswatchedBodyFlag = accountIswatchedFlags.String("body", "REQUIRED", "")

		inspectFlags = flag.NewFlagSet("inspect", flag.ContinueOnError)

		inspectUnpackFlags    = flag.NewFlagSet("unpack", flag.ExitOnError)
		inspectUnpackBodyFlag = inspectUnpackFlags.String("body", "REQUIRED", "")
	)
	infoFlags.Usage = infoUsage
	infoVersionFlags.Usage = infoVersionUsage
	infoLiveFlags.Usage = infoLiveUsage

	accountFlags.Usage = accountUsage
	accountAddFlags.Usage = accountAddUsage
	accountDeleteFlags.Usage = accountDeleteUsage
	accountGetFlags.Usage = accountGetUsage
	accountListFlags.Usage = accountListUsage
	accountIswatchedFlags.Usage = accountIswatchedUsage

	inspectFlags.Usage = inspectUsage
	inspectUnpackFlags.Usage = inspectUnpackUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "info":
			svcf = infoFlags
		case "account":
			svcf = accountFlags
		case "inspect":
			svcf = inspectFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "info":
			switch epn {
			case "version":
				epf = infoVersionFlags

			case "live":
				epf = infoLiveFlags

			}

		case "account":
			switch epn {
			case "add":
				epf = accountAddFlags

			case "delete":
				epf = accountDeleteFlags

			case "get":
				epf = accountGetFlags

			case "list":
				epf = accountListFlags

			case "iswatched":
				epf = accountIswatchedFlags

			}

		case "inspect":
			switch epn {
			case "unpack":
				epf = inspectUnpackFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "info":
			c := infoc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "version":
				endpoint = c.Version()
				data = nil
			case "live":
				endpoint = c.Live()
				data = nil
			}
		case "account":
			c := accountc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = accountc.BuildAddPayload(*accountAddBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = accountc.BuildDeletePayload(*accountDeleteAddressFlag)
			case "get":
				endpoint = c.Get()
				data, err = accountc.BuildGetPayload(*accountGetAddressFlag)
			case "list":
				endpoint = c.List()
				data, err = accountc.BuildListPayload(*accountListViewFlag)
			case "iswatched":
				endpoint = c.Iswatched()
				data, err = accountc.BuildIswatchedPayload(*accountIswatchedBodyFlag)
			}
		case "inspect":
			c := inspectc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "unpack":
				endpoint = c.Unpack()
				data, err = inspectc.BuildUnpackPayload(*inspectUnpackBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// infoUsage displays the usage of the info command and its subcommands.
func infoUsage() {
	fmt.Fprintf(os.Stderr, `The info service provides information on version data, liveness, readiness checks, etc.
Usage:
    %s [globalflags] info COMMAND [flags]

COMMAND:
    version: Returns version information for the service
    live: Simple health check

Additional help:
    %s info COMMAND --help
`, os.Args[0], os.Args[0])
}
func infoVersionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] info version

Returns version information for the service

Example:
    `+os.Args[0]+` info version
`, os.Args[0])
}

func infoLiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] info live

Simple health check

Example:
    `+os.Args[0]+` info live
`, os.Args[0])
}

// accountUsage displays the usage of the account command and its subcommands.
func accountUsage() {
	fmt.Fprintf(os.Stderr, `The account service specifies which Algorand accounts to track
Usage:
    %s [globalflags] account COMMAND [flags]

COMMAND:
    add: Add Algorand account(s) to track
    delete: Delete Algorand account(s) to track
    get: Get specific account
    list: List all tracked accounts
    iswatched: Returns which of the passed accounts are currently being monitored

Additional help:
    %s account COMMAND --help
`, os.Args[0], os.Args[0])
}
func accountAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account add -body JSON

Add Algorand account(s) to track
    -body JSON: 

Example:
    `+os.Args[0]+` account add --body '{
      "address": [
         "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
         "6APKHESCBZIAAZBMMZYW3MEHWYBIT3V7XDA2MF45J5TUZG5LXFXFVBJSFY"
      ]
   }'
`, os.Args[0])
}

func accountDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account delete -address JSON

Delete Algorand account(s) to track
    -address JSON: 

Example:
    `+os.Args[0]+` account delete --address '[
      "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
      "6APKHESCBZIAAZBMMZYW3MEHWYBIT3V7XDA2MF45J5TUZG5LXFXFVBJSFY"
   ]'
`, os.Args[0])
}

func accountGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account get -address STRING

Get specific account
    -address STRING: Public Account address

Example:
    `+os.Args[0]+` account get --address "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
`, os.Args[0])
}

func accountListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account list -view STRING

List all tracked accounts
    -view STRING: 

Example:
    `+os.Args[0]+` account list --view "default"
`, os.Args[0])
}

func accountIswatchedUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account iswatched -body JSON

Returns which of the passed accounts are currently being monitored
    -body JSON: 

Example:
    `+os.Args[0]+` account iswatched --body '{
      "address": [
         "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU",
         "6APKHESCBZIAAZBMMZYW3MEHWYBIT3V7XDA2MF45J5TUZG5LXFXFVBJSFY"
      ]
   }'
`, os.Args[0])
}

// inspectUsage displays the usage of the inspect command and its subcommands.
func inspectUsage() {
	fmt.Fprintf(os.Stderr, `The inspect service provides msgpack decoding services
Usage:
    %s [globalflags] inspect COMMAND [flags]

COMMAND:
    unpack: Unpack a msgpack body (base64 encoded) returning 'goal clerk inspect' output

Additional help:
    %s inspect COMMAND --help
`, os.Args[0], os.Args[0])
}
func inspectUnpackUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] inspect unpack -body JSON

Unpack a msgpack body (base64 encoded) returning 'goal clerk inspect' output
    -body JSON: 

Example:
    `+os.Args[0]+` inspect unpack --body '{
      "msgpack": "Temporibus est voluptate quam dolores et."
   }'
`, os.Args[0])
}
