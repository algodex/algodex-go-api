// Code generated by goa v3.4.3, DO NOT EDIT.
//
// algodexidxsvr HTTP client CLI support package
//
// Command:
// $ goa gen algodexidx/design

package cli

import (
	accountc "algodexidx/gen/http/account/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `account (add|get|list)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` account add --p "Natus ut quam aut."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		accountFlags = flag.NewFlagSet("account", flag.ContinueOnError)

		accountAddFlags = flag.NewFlagSet("add", flag.ExitOnError)
		accountAddPFlag = accountAddFlags.String("p", "REQUIRED", "string is the payload type of the account service add method.")

		accountGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		accountGetAddressFlag = accountGetFlags.String("address", "REQUIRED", "Public Account address")

		accountListFlags = flag.NewFlagSet("list", flag.ExitOnError)
	)
	accountFlags.Usage = accountUsage
	accountAddFlags.Usage = accountAddUsage
	accountGetFlags.Usage = accountGetUsage
	accountListFlags.Usage = accountListUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "account":
			svcf = accountFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "account":
			switch epn {
			case "add":
				epf = accountAddFlags

			case "get":
				epf = accountGetFlags

			case "list":
				epf = accountListFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "account":
			c := accountc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data = *accountAddPFlag
			case "get":
				endpoint = c.Get()
				data, err = accountc.BuildGetPayload(*accountGetAddressFlag)
			case "list":
				endpoint = c.List()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// accountUsage displays the usage of the account command and its subcommands.
func accountUsage() {
	fmt.Fprintf(os.Stderr, `The account service specifies which Algorand accounts to track
Usage:
    %s [globalflags] account COMMAND [flags]

COMMAND:
    add: Add Algorand account to track
    get: Get specific account
    list: List all tracked accounts

Additional help:
    %s account COMMAND --help
`, os.Args[0], os.Args[0])
}
func accountAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account add -p STRING

Add Algorand account to track
    -p STRING: string is the payload type of the account service add method.

Example:
    `+os.Args[0]+` account add --p "Natus ut quam aut."
`, os.Args[0])
}

func accountGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account get -address STRING

Get specific account
    -address STRING: Public Account address

Example:
    `+os.Args[0]+` account get --address "4F5OA5OQC5TBHMCUDJWGKMUZAQE7BGWCKSJJSJEMJO5PURIFT5RW3VHNZU"
`, os.Args[0])
}

func accountListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account list

List all tracked accounts

Example:
    `+os.Args[0]+` account list
`, os.Args[0])
}
